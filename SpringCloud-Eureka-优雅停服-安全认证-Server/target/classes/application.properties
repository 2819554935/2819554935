server.port=8761
spring.application.name=eureka-server
#是否将自己注册到Eureka-server服务当中,默认是为true的
eureka.client.registerWithEureka=false
#是否从Eureka-server中获取服务注册信息,默认是为true
eureka.client.fetchRegistry=true
#因为当前项目就是一个Eureka服务平台,所以不需要再向自己注册了,所以改为false

#关闭自我保护:true 为开启自我保护，false 为关闭自我保护
#eureka.server.enableSelfPreservation=false
#清理间隔(单位:毫秒，默认是 60*1000)
#eureka.server.eviction.interval-timer-in-ms=1500


#1，自我保护的条件
#一般情况下，微服务在 Eureka 上注册后，会每 30 秒发送心跳包，Eureka 通过心跳来
#判断服务时候健康，同时会定期删除超过 90 秒没有发送心跳服务。
#2，有两种情况会导致 Eureka Server 收不到微服务的心跳
#a.是微服务自身的原因
#b.是微服务与 Eureka 之间的网络故障
#通常(微服务的自身的故障关闭)只会导致个别服务出现故障，一般不会出现大面积故
#障，而(网络故障)通常会导致 Eureka Server 在短时间内无法收到大批心跳。
#考虑到这个区别，Eureka 设置了一个阀值，当判断挂掉的服务的数量超过阀值时，
#Eureka Server 认为很大程度上出现了网络故障，将不再删除心跳过期的服务。
#3，那么这个阀值是多少呢？
#15 分钟之内是否低于 85%；
#Eureka Server 在运行期间，会统计心跳失败的比例在 15 分钟内是否低于 85%
#这种算法叫做 Eureka Server 的自我保护模式。

#做安全认证

#开启 http basic 的安全认证
spring.security.basic.enabled=true
spring.security.user.name=fwy
spring.security.user.password=fwy
#若是集群的话
#eureka.client.serviceUrl.defaultZone=http://user:123456@eureka1:8761/eureka/
